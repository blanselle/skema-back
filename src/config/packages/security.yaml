security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        api_token_refresh:
            pattern: ^/api/token/refresh
            stateless: true
            refresh_jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

        back_office:
            pattern: ^/admin
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            user_checker: App\Security\UserChecker
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 1800
            logout:
                path: app_logout
                target: app_login
                
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_COORDINATOR: 'ROLE_CANDIDATE'
        ROLE_RESPONSABLE: 'ROLE_COORDINATOR'
        ROLE_ADMIN: 'ROLE_RESPONSABLE'
        ROLE_SUPER_ADMIN: 'ROLE_ADMIN'

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/login$, role: PUBLIC_ACCESS }
        - { path: ^/api/authentication_token$, role: PUBLIC_ACCESS }
        - { path: ^/api/reset-password/request$, role: PUBLIC_ACCESS }
        - { path: ^/api/reset-password/reset$, role: PUBLIC_ACCESS }
        - { path: ^/api/docs$, role: PUBLIC_ACCESS }
        - { path: ^/api/payments/event, role: PUBLIC_ACCESS }
        - { path: ^/admin*(.*), role: ['ROLE_COORDINATOR', 'ROLE_RESPONSABLE', 'ROLE_ADMIN'] }
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
